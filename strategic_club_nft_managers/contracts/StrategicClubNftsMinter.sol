// SPDX-License-Identifier: MIT

//
// Strategic Club (https://strategicclub.io/)
//
//                                    ..:^^~!!777????????777!!~^^:..
//                               .:^!!7????????????????????????????7!!^:.
//                           :^!7????????????????????????????????????????7!^:
//                       .^!7????????????????????????????????????????????????7!^.
//                    .^!????????????????????????????????????????????????????????!^.
//                  :!??????????????????????????????????????????????????????????????!:
//               .^7??????????????????????????????????????????????????????????????????7^.
//             .~7??????????????????????????????????????????????????????????????????????7~.
//            ^7????????????????7~!???????77???7777777????????????????????????????????????7^
//          :7?????????????????!:::~7???7^::~7^:::::::^^^^~!7???????????????????????????????7:
//         ~???????????????????7:::::^^~~::::^^:::::::::::::^~7???????????????????????????????~
//       .!?????????????????????7::::::::::::::::::::::::::::::^!??????????????????????????????!.
//      :7?????????????????????!^::::::::::::::::::::::::::::::::^!?????????????????????????????7:
//     :??????????????????????~:::::::::::::::::::^^::::::::::::^5^^7?????????????????????????????:
//    :??????????????????????~:::::::::::::::::::JG::::::..::..:~#5.:!?????????????????????????????:
//   .7??????????????????????~:::~~::::::::::::::B@?~^~7??YPPJJP&B7:::~????????????????????????????7.
//   !?????????????????????7~::::::::::::::::::::~5##&@@@@@@@@@@B^:::::~????????????????????????????!
//  :????????????????????7~:::::::::::::::::::::::^?G@@@@@@@@@@5^:::::::7????????????????????????????:
//  !???????????????????~:::::::::::::::::::::::::Y@@@@@@@@@@@@&?:::::::~????????????????????????????!
// :????????????????????!::::::::::::::::::::::::.~G#&@@@@@@@@@@@5::::::^?????????????????????????????:
// ~?????????????????????7~^:::::::^^^^:::::::^~?5B&@@@@@@@@@@@@@@Y::::::?????????????????????????????~
// 7????????????????????????7777777G&&##BBBBBB#&@@@@@@@@@@@@@@@@@@#^:::::7????????????????????????????7
// ???????????????????????????????P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&^::::^??????????????????????????????
// ??????????????????????????????Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#:::::~??????????????????????????????
// ?????????????????????????????7P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@~::::7??????????????????????????????
// 7????????????????????????????7Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@5::::^??????????????????????????????7
// ~????????????????????????????G&@@@#BPPGB&@@@@@@@@@@@@@@@@@@@@@Y:::::7??????????????????????????????~
// :???????????????????????????J@@@BY^:::::7@@@#P#@@@@@@@@@#&@@@J.::::~???????????????????????????????:
//  !?????????????????????????7P@@P7?!:::::~&@G^.!@@&YYPPY7:7@@B:::::^???????????????????????????????!
//  :?????????????????????????5@@&?777^.:::7@@Y::!@@5........B@#^:::^7???????????????????????????????:
//   !???????????????????????7Y@@@PY5PGPGBB#@@@&&@@@&#BBGGP55@@@Y~^^7???????????????????????????????!
//   .7?????????????????77?JYPB@@@@@@@&&##BGGPP555YYY5555555P5PPGGPGGPP5YJJ????????????????????????7.
//    :????????????????J5G#&&#GPYJ?7!~~^^:::::::::::::::::::::::::^^^~~!77???77????????????????????:
//     :????????????YPGG5J7!^^:::::^^^^^~~~~~~~~~~~~~!!~~~~~~~~~~~~^^^^^^::::^^^^~!!7?????????????:
//      :7???????7?J?7~^^~~~!!777777????????????????????????????????????77777!!!~~~^^~~!77??????7:
//       .!?????7!!!77???????????????????????????????????????????????????????????????777!!7????!.
//         ~??????????????????????????????????????????????????????????????????????????????????~
//          :7??????????????????????????????????????????????????????????????????????????????7:
//            ^7??????????????????????????????????????????????????????????????????????????7^
//             .~7??????????????????????????????????????????????????????????????????????7~.
//               .^7??????????????????????????????????????????????????????????????????7^.
//                  :!??????????????????????????????????????????????????????????????!:
//                    .^!????????????????????????????????????????????????????????!^.
//                       .^!7????????????????????????????????????????????????7!^.
//                           :^!7????????????????????????????????????????7!^:
//                               .:^!!7????????????????????????????7!!^:.
//                                    ..:^^~!!777????????777!!~^^:..
//

pragma solidity ^0.8.0;

//=============================================================//
//                            IMPORTS                          //
//=============================================================//
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "./libs/TelegramNftsManager.sol";


/**
 * @author Emanuele (@emanueleb88)
 * @title  Strategic Club NFTs minter
 * @notice It allows users to mint a ERC721 or ERC1155 NFT for a specific ERC20 token amount (e.g. stable coins).
 *         The NFTs to be minted are set by the contract owner.
 *         In order to allow minting with ERC20 tokens, the NFT are pre-minted to this contract and then
 *         transferred to users in exchange of ERC20 tokens.
 */
contract StrategicClubNftsMinter is
    ReentrancyGuard,
    TelegramNftsManager
{
    //=============================================================//
    //                         STRUCTURES                          //
    //=============================================================//

    /// Structure for mint data
    struct Mint {
        uint256 nftAmount;      // Only used for ERC1155 (always 0 for ERC721)
        IERC20 erc20Contract;
        uint256 erc20Amount;
        bool isActive;
    }

    //=============================================================//
    //                           ERRORS                            //
    //=============================================================//

    /**
     * Error raised if a token mint is already created for the `nftContract` and `nftId`
     * @param nftContract NFT contract address
     * @param nftId       NFT ID
     */
    error MintAlreadyCreatedError(
        address nftContract,
        uint256 nftId
    );

    /**
     * Error raised if a token mint is not created for the `nftContract` and `nftId`
     * @param nftContract NFT contract address
     * @param nftId       NFT ID
     */
    error MintNotCreatedError(
        address nftContract,
        uint256 nftId
    );

    //=============================================================//
    //                             EVENTS                          //
    //=============================================================//

    /**
     * Event emitted when a mint is created
     * @param nftContract   NFT contract address
     * @param nftId         NFT ID
     * @param nftAmount     NFT amount
     * @param erc20Contract ERC20 contract address
     * @param erc20Amount   ERC20 amount to pay for the mint
     */
    event MintCreated(
        address nftContract,
        uint256 nftId,
        uint256 nftAmount,
        IERC20 erc20Contract,
        uint256 erc20Amount
    );

    /**
     * Event emitted when a mint is removed
     * @param nftContract NFT contract address
     * @param nftId       NFT ID
     */
    event MintRemoved(
        address nftContract,
        uint256 nftId
    );

    /**
     * Event emitted when a mint is completed
     * @param telegramId    Telegram ID
     * @param minter        Minter address
     * @param nftContract   NFT contract address
     * @param nftId         NFT ID
     * @param nftAmount     NFT amount
     * @param erc20Contract ERC20 contract address
     * @param erc20Amount   ERC20 amount to pay for the mint
     */
    event MintCompleted(
        uint256 telegramId,
        address minter,
        address nftContract,
        uint256 nftId,
        uint256 nftAmount,
        IERC20 erc20Contract,
        uint256 erc20Amount
    );

    //=============================================================//
    //                            STORAGE                          //
    //=============================================================//

    /// Mapping from token address and ID to mint data
    mapping(address => mapping(uint256 => Mint)) public Mints;

    //=============================================================//
    //                       PUBLIC FUNCTIONS                      //
    //=============================================================//

    /**
     * Get if a mint is active
     * @param nftContract_ NFT contract address
     * @param nftId_       NFT ID
     * @return True if active, false otherwise
     */
    function isMintActive(
        address nftContract_,
        uint256 nftId_
    ) external view returns (bool) {
        Mint storage mint = Mints[nftContract_][nftId_];
        return mint.isActive;
    }

    /**
     * Create a ERC721 token mint
     * The token shall be owned by the contract
     * @param nftContract_   NFT contract address
     * @param nftId_         NFT ID
     * @param erc20Contract_ ERC20 contract address
     * @param erc20Amount_   Price of the ERC721 token in ERC20 token
     */
    function createERC721Mint(
        IERC721 nftContract_,
        uint256 nftId_,
        IERC20 erc20Contract_,
        uint256 erc20Amount_
    ) public onlyOwner {
        __createMint(
            address(nftContract_),
            nftId_,
            0,
            erc20Contract_,
            erc20Amount_
        );
    }

    /**
     * Create a ERC1155 token mint
     * The token shall be owned by the contract
     * @param nftContract_   NFT contract address
     * @param nftId_         NFT ID
     * @param nftAmount_     NFT amount
     * @param erc20Contract_ ERC20 contract address
     * @param erc20Amount_   ERC20 amount
     */
    function createERC1155Mint(
        IERC1155 nftContract_,
        uint256 nftId_,
        uint256 nftAmount_,
        IERC20 erc20Contract_,
        uint256 erc20Amount_
    )
        public
        onlyOwner
        notZeroAmount(nftAmount_)
    {
        __createMint(
            address(nftContract_),
            nftId_,
            nftAmount_,
            erc20Contract_,
            erc20Amount_
        );
    }

    /**
     * Remove a token mint
     * @param nftContract_ NFT contract address
     * @param nftId_       NFT ID
     */
    function removeMint(
        address nftContract_,
        uint256 nftId_
    ) public onlyOwner {
        __removeMint(nftContract_, nftId_);
    }

    /**
     * Withdraw a ERC721 token to owner.
     * The token shall not be on mint. In case it is, it shall be removed before calling the function.
     * @param nftContract_ NFT contract address
     * @param nftId_       NFT ID
     */
    function withdrawERC721(
        IERC721 nftContract_,
        uint256 nftId_
    ) public onlyOwner {
        __withdraw(
            address(nftContract_),
            nftId_,
            0
        );
    }

    /**
     * Withdraw a ERC1155 token to owner.
     * The token shall not be on mint. In case it is, it shall be removed before calling the function.
     * @param nftContract_ NFT contract address
     * @param nftId_       NFT ID
     * @param nftAmount_   NFT amount (ignored for ERC721)
     */
    function withdrawERC1155(
        IERC1155 nftContract_,
        uint256 nftId_,
        uint256 nftAmount_
    )
        public
        onlyOwner
        notZeroAmount(nftAmount_)
    {
        __withdraw(
            address(nftContract_),
            nftId_,
            nftAmount_
        );
    }

    /**
     * Mint a ERC721 token
     * @param telegramId_  Telegram ID
     * @param nftContract_ NFT contract address
     * @param nftId_       NFT ID
     */
    function mintERC721(
        uint256 telegramId_,
        IERC721 nftContract_,
        uint256 nftId_
    )
        public
        nonReentrant
    {
        __mint(
            telegramId_,
            address(nftContract_),
            nftId_,
            0
        );
    }

    /**
     * Mint a ERC1155 token
     * @param telegramId_  Telegram ID
     * @param nftContract_ NFT contract address
     * @param nftId_       NFT ID
     * @param nftAmount_   NFT amount (ignored for ERC721)
     */
    function mintERC1155(
        uint256 telegramId_,
        IERC1155 nftContract_,
        uint256 nftId_,
        uint256 nftAmount_
    )
        public
        nonReentrant
        notZeroAmount(nftAmount_)
    {
        __mint(
            telegramId_,
            address(nftContract_),
            nftId_,
            nftAmount_
        );
    }

    //=============================================================//
    //                      INTERNAL FUNCTIONS                     //
    //=============================================================//

    /**
     * Initialize the mint `mint_`
     * @param mint_          Mint structure
     * @param nftAmount_     NFT amount
     * @param erc20Contract_ ERC20 contract address
     * @param erc20Amount_   ERC20 amount
     */
    function __initMint(
        Mint storage mint_,
        uint256 nftAmount_,
        IERC20 erc20Contract_,
        uint256 erc20Amount_
    ) private {
        mint_.nftAmount = nftAmount_;
        mint_.erc20Contract = erc20Contract_;
        mint_.erc20Amount = erc20Amount_;
        mint_.isActive = true;
    }

    /**
     * Create a token mint
     * @param nftContract_   NFT contract address
     * @param nftId_         NFT ID
     * @param nftAmount_     NFT amount
     * @param erc20Contract_ ERC20 contract address
     * @param erc20Amount_   ERC20 amount
     */
    function __createMint(
        address nftContract_,
        uint256 nftId_,
        uint256 nftAmount_,
        IERC20 erc20Contract_,
        uint256 erc20Amount_
    )
        private
        notNullAddress(address(erc20Contract_))
    {
        if (nftAmount_ == 0) {
            _validateERC721(IERC721(nftContract_), nftId_);
        }
        else {
            _validateERC1155(IERC1155(nftContract_), nftId_, nftAmount_);
        }

        Mint storage mint = Mints[nftContract_][nftId_];
        if (mint.isActive) {
            revert MintAlreadyCreatedError(nftContract_, nftId_);
        }

        __initMint(
            mint,
            nftAmount_,
            erc20Contract_,
            erc20Amount_
        );

        emit MintCreated(
            nftContract_,
            nftId_,
            nftAmount_,
            erc20Contract_,
            erc20Amount_
        );
    }

    /**
     * Remove a token mint
     * @param nftContract_ NFT contract address
     * @param nftId_       NFT ID
     */
    function __removeMint(
        address nftContract_,
        uint256 nftId_
    )
        private
        notNullAddress(address(nftContract_))
    {
        Mint storage mint = Mints[nftContract_][nftId_];
        if (!mint.isActive) {
            revert MintNotCreatedError(nftContract_, nftId_);
        }

        mint.isActive = false;

        emit MintRemoved(nftContract_, nftId_);
    }

    /**
     * Withdraw token to owner
     * @param nftContract_ NFT contract address
     * @param nftId_       NFT ID
     * @param nftAmount_   NFT amount (ignored for ERC721)
     */
    function __withdraw(
        address nftContract_,
        uint256 nftId_,
        uint256 nftAmount_
    )
        private
        notNullAddress(nftContract_)
    {
        address target = owner();

        Mint storage mint = Mints[nftContract_][nftId_];
        if (mint.isActive) {
            if (nftAmount_ == 0) {
                revert WithdrawError(nftContract_, nftId_);
            }
            uint256 withdrawable_amount = IERC1155(nftContract_).balanceOf(address(this), nftId_) - mint.nftAmount;
            if (nftAmount_ > withdrawable_amount) {
                revert WithdrawError(nftContract_, nftId_);
            }
        }

        if (nftAmount_ == 0) {
            _withdrawERC721(
                target,
                IERC721(nftContract_),
                nftId_
            );
        }
        else {
            _withdrawERC1155(
                target,
                IERC1155(nftContract_),
                nftId_,
                nftAmount_
            );
        }
    }

    /**
     * Mint a token
     * @param telegramId_  Telegram ID
     * @param nftContract_ NFT contract address
     * @param nftId_       NFT ID
     * @param nftAmount_   NFT amount (ignored for ERC721)
     */
    function __mint(
        uint256 telegramId_,
        address nftContract_,
        uint256 nftId_,
        uint256 nftAmount_
    )
        private
        notNullAddress(nftContract_)
    {
        Mint storage mint = Mints[nftContract_][nftId_];
        if (!mint.isActive) {
            revert MintNotCreatedError(nftContract_, nftId_);
        }

        if (mint.nftAmount == 0) {
            __mintERC721(
                mint,
                telegramId_,
                nftContract_,
                nftId_
            );
        }
        else {
            __mintERC1155(
                mint,
                telegramId_,
                nftContract_,
                nftId_,
                nftAmount_
            );
        }

        emit MintCompleted(
            telegramId_,
            _msgSender(),
            nftContract_,
            nftId_,
            nftAmount_,
            mint.erc20Contract,
            mint.erc20Amount
        );
    }

    /**
     * Mint a ERC721 token
     * @param mint_        Mint structure
     * @param nftContract_ NFT contract address
     * @param nftId_       NFT ID
     */
    function __mintERC721(
        Mint storage mint_,
        uint256 telegramId_,
        address nftContract_,
        uint256 nftId_
    ) private {
        mint_.isActive = false;

        _setTelegramIdERC721Flag(
            telegramId_,
            IERC721(nftContract_)
        );
        _transferERC721InExchangeOfERC20(
            _msgSender(),
            IERC721(nftContract_),
            nftId_,
            mint_.erc20Contract,
            mint_.erc20Amount
        );
    }

    /**
     * Mint a ERC1155 token
     * @param mint_        Mint structure
     * @param nftContract_ NFT contract address
     * @param nftId_       NFT ID
     */
    function __mintERC1155(
        Mint storage mint_,
        uint256 telegramId_,
        address nftContract_,
        uint256 nftId_,
        uint256 nftAmount_
    ) private {
        if (nftAmount_ > mint_.nftAmount) {
            revert AmountError();
        }

        // Reset if no more token left
        mint_.nftAmount -= nftAmount_;
        if (mint_.nftAmount == 0) {
            mint_.isActive = false;
        }

        _setTelegramIdERC1155Flag(
            telegramId_,
            IERC1155(nftContract_),
            nftId_
        );
        _transferERC1155InExchangeOfERC20(
            _msgSender(),
            IERC1155(nftContract_),
            nftId_,
            nftAmount_,
            mint_.erc20Contract,
            mint_.erc20Amount * nftAmount_
        );
    }
}
