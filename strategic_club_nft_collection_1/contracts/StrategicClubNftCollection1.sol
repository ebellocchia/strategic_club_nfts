// SPDX-License-Identifier: MIT

//
// Strategic Club (https://strategicclub.io/)
//
//                                    ..:^^~!!777????????777!!~^^:..
//                               .:^!!7????????????????????????????7!!^:.
//                           :^!7????????????????????????????????????????7!^:
//                       .^!7????????????????????????????????????????????????7!^.
//                    .^!????????????????????????????????????????????????????????!^.
//                  :!??????????????????????????????????????????????????????????????!:
//               .^7??????????????????????????????????????????????????????????????????7^.
//             .~7??????????????????????????????????????????????????????????????????????7~.
//            ^7????????????????7~!???????77???7777777????????????????????????????????????7^
//          :7?????????????????!:::~7???7^::~7^:::::::^^^^~!7???????????????????????????????7:
//         ~???????????????????7:::::^^~~::::^^:::::::::::::^~7???????????????????????????????~
//       .!?????????????????????7::::::::::::::::::::::::::::::^!??????????????????????????????!.
//      :7?????????????????????!^::::::::::::::::::::::::::::::::^!?????????????????????????????7:
//     :??????????????????????~:::::::::::::::::::^^::::::::::::^5^^7?????????????????????????????:
//    :??????????????????????~:::::::::::::::::::JG::::::..::..:~#5.:!?????????????????????????????:
//   .7??????????????????????~:::~~::::::::::::::B@?~^~7??YPPJJP&B7:::~????????????????????????????7.
//   !?????????????????????7~::::::::::::::::::::~5##&@@@@@@@@@@B^:::::~????????????????????????????!
//  :????????????????????7~:::::::::::::::::::::::^?G@@@@@@@@@@5^:::::::7????????????????????????????:
//  !???????????????????~:::::::::::::::::::::::::Y@@@@@@@@@@@@&?:::::::~????????????????????????????!
// :????????????????????!::::::::::::::::::::::::.~G#&@@@@@@@@@@@5::::::^?????????????????????????????:
// ~?????????????????????7~^:::::::^^^^:::::::^~?5B&@@@@@@@@@@@@@@Y::::::?????????????????????????????~
// 7????????????????????????7777777G&&##BBBBBB#&@@@@@@@@@@@@@@@@@@#^:::::7????????????????????????????7
// ???????????????????????????????P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&^::::^??????????????????????????????
// ??????????????????????????????Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#:::::~??????????????????????????????
// ?????????????????????????????7P@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@~::::7??????????????????????????????
// 7????????????????????????????7Y@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@5::::^??????????????????????????????7
// ~????????????????????????????G&@@@#BPPGB&@@@@@@@@@@@@@@@@@@@@@Y:::::7??????????????????????????????~
// :???????????????????????????J@@@BY^:::::7@@@#P#@@@@@@@@@#&@@@J.::::~???????????????????????????????:
//  !?????????????????????????7P@@P7?!:::::~&@G^.!@@&YYPPY7:7@@B:::::^???????????????????????????????!
//  :?????????????????????????5@@&?777^.:::7@@Y::!@@5........B@#^:::^7???????????????????????????????:
//   !???????????????????????7Y@@@PY5PGPGBB#@@@&&@@@&#BBGGP55@@@Y~^^7???????????????????????????????!
//   .7?????????????????77?JYPB@@@@@@@&&##BGGPP555YYY5555555P5PPGGPGGPP5YJJ????????????????????????7.
//    :????????????????J5G#&&#GPYJ?7!~~^^:::::::::::::::::::::::::^^^~~!77???77????????????????????:
//     :????????????YPGG5J7!^^:::::^^^^^~~~~~~~~~~~~~!!~~~~~~~~~~~~^^^^^^::::^^^^~!!7?????????????:
//      :7???????7?J?7~^^~~~!!777777????????????????????????????????????77777!!!~~~^^~~!77??????7:
//       .!?????7!!!77???????????????????????????????????????????????????????????????777!!7????!.
//         ~??????????????????????????????????????????????????????????????????????????????????~
//          :7??????????????????????????????????????????????????????????????????????????????7:
//            ^7??????????????????????????????????????????????????????????????????????????7^
//             .~7??????????????????????????????????????????????????????????????????????7~.
//               .^7??????????????????????????????????????????????????????????????????7^.
//                  :!??????????????????????????????????????????????????????????????!:
//                    .^!????????????????????????????????????????????????????????!^.
//                       .^!7????????????????????????????????????????????????7!^.
//                           :^!7????????????????????????????????????????7!^:
//                               .:^!!7????????????????????????????7!!^:.
//                                    ..:^^~!!777????????777!!~^^:..
//

pragma solidity ^0.8.0;

//=============================================================//
//                           IMPORTS                           //
//=============================================================//
import "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/common/ERC2981Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol";
import "./libs/ERC721CappedUpgradeable.sol";
import "./libs/ERC721RevealableMultipleURIStorageUpgradeable.sol";
import "./libs/ERC721SelectivePausableUpgradeable.sol";
import "./libs/ERC721WalletCappedUpgradeable.sol";


/**
 * @author Emanuele (@emanueleb88)
 * @title  Strategic Club NFT Collection 1
 */
contract StrategicClubNftCollection1 is
    Initializable,
    OwnableUpgradeable,
    UUPSUpgradeable,
    ERC2981Upgradeable,
    ERC721Upgradeable,
    ERC721CappedUpgradeable,
    ERC721RevealableMultipleURIStorageUpgradeable,
    ERC721SelectivePausableUpgradeable,
    ERC721WalletCappedUpgradeable
{
    //=============================================================//
    //                          CONSTANTS                          //
    //=============================================================//

    /// NFT name
    string constant private NFT_NAME = "Strategic Club NFT Collection #1";
    /// NFT symbol
    string constant private NFT_SYMBOL = "SCN1";

    //=============================================================//
    //                           ERRORS                            //
    //=============================================================//

    /**
     * Error raised if caller is not the token owner
     * @param tokenId Token ID
     */
    error NotTokenOwnerError(
        uint256 tokenId
    );

    /**
     * Error raised if airdropped zero tokens
     */
    error ZeroTokensAirdropError();

    /**
     * Error raised if minting zero tokens
     */
    error ZeroTokensMintError();

    //=============================================================//
    //                            EVENTS                           //
    //=============================================================//

    /**
     * Event emitted when a single token is minted
     * @param to      Target address
     * @param tokenId Token ID
     */
    event SingleTokenMinted(
        address to,
        uint256 tokenId
    );

    /**
     * Event emitted when multiple tokens are minted
     * @param to           Target address
     * @param startTokenId Start token IDs
     * @param amounts      Token amounts
     */
    event MultipleTokensMinted(
        address to,
        uint256 startTokenId,
        uint256 amounts
    );

    /**
     * Event emitted when tokens are airdropped
     * @param tos          Target addresses
     * @param startTokenId Start token IDs
     * @param amounts      Token amounts
     */
    event TokensAirdropped(
        address[] tos,
        uint256 startTokenId,
        uint256 amounts
    );

    /**
     * Event emitted when a single token is burned
     * @param tokenId Token ID
     */
    event SingleTokenBurned(
        uint256 tokenId
    );

    /**
     * Event emitted when default royalty is set
     * @param receiver    Receiver address
     * @param feeFraction Fee fraction
     */
    event DefaultRoyaltySet(
        address receiver,
        uint256 feeFraction
    );

    /**
     * Event emitted when default royalty is deleted
     */
    event DefaultRoyaltyDeleted();

    //=============================================================//
    //                          MODIFIERS                          //
    //=============================================================//

    /**
     * Modifier to make a function callable only by the owner of token ID `tokenId_`
     * @param tokenId_ Token ID
     */
    modifier onlyOwnerOrTokenOwner(
        uint256 tokenId_
    ) {
        address sender = _msgSender();
        if (sender != owner() && sender != _ownerOf(tokenId_)) {
            revert NotTokenOwnerError(tokenId_);
        }
        _;
    }

    //=============================================================//
    //                         CONSTRUCTOR                         //
    //=============================================================//

    /**
     * Constructor
     * @dev Disable initializer for implementation contract
     */
    constructor() {
        _disableInitializers();
    }

    //=============================================================//
    //                      PUBLIC FUNCTIONS                       //
    //=============================================================//

    /**
     * Initialize
     * @param baseURI_   Base URI
     * @param maxSupply_ Maximum supply
     */
    function init(
        string memory baseURI_,
        uint256 maxSupply_
    ) public initializer {
        __ERC721Capped_init(maxSupply_);
        __ERC721SelectivePausable_init();
        __ERC721RevealableMultipleURIStorage_init(baseURI_);
        __ERC721WalletCapped_init();

        __ERC721_init(NFT_NAME, NFT_SYMBOL);
        __ERC2981_init();
        __Ownable_init();
    }

    //
    // Mint/Burn
    //

    /**
     * Mint a single token to `to_`
     * @param to_ Receiver address
     */
    function mintTo(
        address to_
    ) public onlyOwner {
        _safeMintTo(to_);

        emit SingleTokenMinted(to_, totalSupply() - 1);
    }

    /**
     * Mint `amount_` tokens to `to_`
     * @param to_     Receiver address
     * @param amount_ Amount of tokens
     */
    function mintBatchTo(
        address to_,
        uint256 amount_
    ) public onlyOwner {
        if (amount_ == 0) {
            revert ZeroTokensMintError();
        }

        for (uint256 i = 0; i < amount_; i++) {
            _safeMintTo(to_);
        }

        emit MultipleTokensMinted(to_, totalSupply() - amount_, amount_);
    }

    /**
     * Airdrop tokens to `receivers_`
     * @param receivers_ Receiver addresses
     */
    function airdrop(
        address[] calldata receivers_
    ) public onlyOwner {
        uint256 amount = receivers_.length;
        if (amount == 0) {
            revert ZeroTokensAirdropError();
        }

        for (uint256 i = 0; i < amount; i++) {
            _safeMintTo(receivers_[i]);
        }

        emit TokensAirdropped(receivers_, totalSupply() - amount, amount);
    }

    /**
     * Burn token `tokenId_`
     * @param tokenId_ Token ID
     */
    function burn(
        uint256 tokenId_
    ) public onlyOwner {
        _burn(tokenId_);

        emit SingleTokenBurned(tokenId_);
    }

    //
    // Maximum supply management
    //

    /**
     * Increase maximum supply to `maxSupply_`
     * @param maxSupply_ New maximum supply
     */
    function increaseMaxSupply(
        uint256 maxSupply_
    ) public onlyOwner {
        _increaseMaxSupply(maxSupply_);
    }

    /**
     * Freeze maximum supply
     */
    function freezeMaxSupply() public onlyOwner {
        _freezeMaxSupply();
    }

    //
    // URIs management
    //

    /**
     * Set base URI to `baseURI_`
     * @param baseURI_ Base URI
     */
    function setBaseURI(
        string memory baseURI_
    ) public onlyOwner notEmptyURI(baseURI_) {
        _setBaseURI(baseURI_);
    }

    /**
     * Set contract URI`to `contractURI_`
     * @param contractURI_ Contract URI
     */
    function setContractURI(
        string memory contractURI_
    ) public onlyOwner notEmptyURI(contractURI_) {
        _setContractURI(contractURI_);
    }

    /**
     * Set URI of token ID `tokenId_` to `tokenURI_`
     * @param tokenId_  Token ID
     * @param tokenURI_ Token URI
     */
    function setTokenURI(
        uint256 tokenId_,
        string memory tokenURI_
    ) public onlyOwner notEmptyURI(tokenURI_)  {
        _setTokenURI(tokenId_, tokenURI_);
    }

    /**
     * Reset URI of token ID `tokenId_` (empty string)
     * @param tokenId_ Token ID
     */
    function resetTokenURI(
        uint256 tokenId_
    ) public onlyOwner {
        _resetTokenURI(tokenId_);
    }

    /**
     * Set unrevealed URI to `unrevealedURI_`
     * @param unrevealedURI_ Unrevealed URI
     */
    function setUnrevealedURI(
        string memory unrevealedURI_
    ) public onlyOwner notEmptyURI(unrevealedURI_)  {
        _setUnrevealedURI(unrevealedURI_);
    }

    /**
     * Freeze URI
     */
    function freezeURI() public onlyOwner {
        _freezeURI();
    }

    /**
     * Enable URIs revealing
     */
    function enableURIsRevealing() public onlyOwner {
        _enableURIsRevealing();
    }

    /**
     * Disable URIs revealing
     */
    function disableURIsRevealing() public onlyOwner {
        _disableURIsRevealing();
    }

    /**
     * Reveal all URIs
     */
    function revealAllURIs() public onlyOwner {
        _revealAllURIs();
    }

    /**
     * Reveal URI of single token `tokenId_`
     * @param tokenId_ Token ID
     */
    function revealSingleURI(
        uint256 tokenId_
    ) public onlyOwnerOrTokenOwner(tokenId_) {
        _revealSingleURI(tokenId_);
    }

    /**
     * Unreveal URI of single token `tokenId_`
     * @param tokenId_ Token ID
     */
    function unrevealSingleURI(
        uint256 tokenId_
    ) public onlyOwner {
        _unrevealSingleURI(tokenId_);
    }

    //
    // Maximum tokens per wallet management
    //

    /**
     * Set the maximum number of tokens for the wallet `wallet_` to `maxTokens_
     * @param wallet_    Wallet address
     * @param maxTokens_ Maximum number of tokens
     */
    function setWalletMaxTokens(
        address wallet_,
        uint256 maxTokens_
    ) public onlyOwner {
        _setWalletMaxTokens(wallet_, maxTokens_);
    }

    /**
     * Set the default wallet maximum number of tokens to `maxTokens_`
     * @param maxTokens_ Maximum number of tokens
     */
    function setDefaultWalletMaxTokens(
        uint256 maxTokens_
    ) public onlyOwner {
        _setDefaultWalletMaxTokens(maxTokens_);
    }

    //
    // Pause management
    //

    /**
     * Set the status of paused wallet `wallet_` to `status_`
     * @param wallet_ Wallet address
     * @param status_ True if wallet cannot transfer tokens, false otherwise
     */
    function setPausedWallet(
        address wallet_,
        bool status_
    ) public onlyOwner {
        _setPausedWallet(wallet_, status_);
    }

    /**
     * Set the status of unpaused wallet `wallet_` to `status_`
     * @param wallet_ Wallet address
     * @param status_ True if wallet can transfer tokens when paused, false otherwise
     */
    function setUnpausedWallet(
        address wallet_,
        bool status_
    ) public onlyOwner {
        _setUnpausedWallet(wallet_, status_);
    }

    /**
     * Pause token transfers
     */
    function pauseTransfers() public onlyOwner {
        _pause();
    }

    /**
     * Unpause token transfers
     */
    function unpauseTransfers() public onlyOwner {
        _unpause();
    }

    //
    // Royalties management
    //

    /**
     * Set the royalty information that all ids in this contract will default to
     * @param receiver_    Receiver address
     * @param feeFraction_ Fee fraction
     */
    function setDefaultRoyalty(
        address receiver_,
        uint96 feeFraction_
    ) public onlyOwner {
        _setDefaultRoyalty(receiver_, feeFraction_);

        emit DefaultRoyaltySet(receiver_, feeFraction_);
    }

    /**
     * Delete default royalty information
     */
    function deleteDefaultRoyalty() public onlyOwner {
        _deleteDefaultRoyalty();

        emit DefaultRoyaltyDeleted();
    }

    //=============================================================//
    //                    OVERRIDDEN FUNCTIONS                     //
    //=============================================================//

    /**
     * Restrict upgrade to owner
     * See {UUPSUpgradeable-_authorizeUpgrade}
     */
    function _authorizeUpgrade(
        address newImplementation_
    ) internal override onlyOwner {
    }

    /**
     * See {ERC721-_mint}
     */
    function _mint(
        address to_,
        uint256 tokenId_
    ) internal virtual override(ERC721CappedUpgradeable, ERC721Upgradeable) {
        super._mint(to_, tokenId_);
    }

    /**
     * See {ERC721-_beforeTokenTransfer}
     */
    function _beforeTokenTransfer(
        address from_,
        address to_,
        uint256 firstTokenId_,
        uint256 batchSize_
    ) internal virtual override(ERC721WalletCappedUpgradeable, ERC721SelectivePausableUpgradeable, ERC721Upgradeable) {
        super._beforeTokenTransfer(from_, to_, firstTokenId_, batchSize_);
    }

    /**
     * See {ERC721-tokenURI}
     */
    function tokenURI(
        uint256 tokenId_
    ) public view virtual override(ERC721RevealableMultipleURIStorageUpgradeable, ERC721Upgradeable) returns (string memory) {
        return super.tokenURI(tokenId_);
    }

    /**
     * See {ERC721-_baseURI}
     */
    function _baseURI() internal view override(ERC721MultipleURIStorageUpgradeable, ERC721Upgradeable) returns (string memory) {
        return super._baseURI();
    }

    /**
     * See {IERC165-supportsInterface}
     */
    function supportsInterface(
        bytes4 interfaceId_
    ) public view virtual override(ERC721Upgradeable, ERC2981Upgradeable, IERC165Upgradeable) returns (bool) {
        return super.supportsInterface(interfaceId_);
    }
}
